/**
 * Provides the interface for the Options tab of the map controls.
 */

import { makeStyles, Box, Button, Typography } from '@material-ui/core';
import React from 'react';
import { connect } from 'react-redux';

import { t } from '~/components/i18n/Localization';
import BorderBox from '~/components/interface/BorderBox';
import { TabView } from '~/components/interface/Tabs';
import { importMarkerDataFromSite } from '~/components/preferences/import/ExternalImport';
import { exportDataJSON } from '~/components/preferences/DataExport';
import { isValidJSON } from '~/components/Util';
import ExportDataPopup from '~/components/views/popups/ExportDataPopup';
import ImportDataPopup from '~/components/views/popups/ImportDataPopup';
import { clearMapPreferences, setMapPreferences } from '~/redux/ducks';
import { displayImportError } from '~/redux/ducks/error';
import { parseDataFromString } from '~/components/preferences/import/InternalImport';
import { setFeatureMarkersCompleted } from '~/redux/ducks/completed';

import Bookmarklets from '~/data/core/bookmarklets.json';

const useStyles = makeStyles((_theme) => ({
  label: {
    flexGrow: 1,
  },
  button: {
    width: 140,
  },
  optionContainer: {
    display: 'flex',
    flexDirection: 'row',
    flexWrap: 0,
    alignItems: 'center',
    marginBottom: 8,
  },
}));

// Note: The dispatchers generated by mapDispatchToProps
// shadow their associated action generators.
/* eslint-disable no-shadow */
const _MapControlsSync = ({
  displayed,

  completeFeatures,

  importPreferences,
}) => {
  const classes = useStyles();

  const importDataYuanshen = (dataString) => {
    return importMarkerDataFromSite(dataString, 'yuanshen', completeFeatures);
  };

  const importDataMapGenie = (dataString) => {
    return importMarkerDataFromSite(dataString, 'mapgenie', completeFeatures);
  };

  const importDataAppSample = (dataString) => {
    return importMarkerDataFromSite(dataString, 'appsample', completeFeatures);
  };

  const importDataGenshinMap = (dataString) => {
    return importPreferences(dataString);
  };

  return (
    <TabView grow displayed={displayed}>
      <BorderBox grow={false} overflow="show">
        <Box className={classes.optionContainer}>
          <Typography className={classes.label}>{t('migrate-yuanshen')}</Typography>
          <ImportDataPopup
            title={t('migrate-yuanshen')}
            content={t('migrate-yuanshen-content')}
            contentSupports={t('migrate-yuanshen-support')}
            trigger={
              <Button className={classes.button} variant="contained" size="small">
                {t('migrate')}
              </Button>
            }
            onConfirm={importDataYuanshen}
          />
        </Box>
        <Box className={classes.optionContainer}>
          <Typography className={classes.label}>{t('migrate-appsample')}</Typography>
          <ImportDataPopup
            title={t('migrate-appsample')}
            content={t('migrate-appsample-content')}
            contentSupports={t('migrate-appsample-support')}
            bookmarklet={Bookmarklets.appsample}
            trigger={
              <Button className={classes.button} variant="contained" size="small">
                {t('migrate')}
              </Button>
            }
            onConfirm={importDataAppSample}
          />
        </Box>
        <Box className={classes.optionContainer} style={{ display: 'none' }}>
          <Typography className={classes.label}>{t('migrate-mapgenie')}</Typography>
          <ImportDataPopup
            title={t('migrate-mapgenie')}
            content={t('migrate-mapgenie-content')}
            contentSupports={t('migrate-mapgenie-support')}
            bookmarklet={Bookmarklets.mapgenie}
            trigger={
              <Button className={classes.button} variant="contained" size="small">
                {t('migrate')}
              </Button>
            }
            onConfirm={importDataMapGenie}
          />
        </Box>
      </BorderBox>
      <BorderBox grow={false} overflow="show">
        <Box className={classes.optionContainer}>
          <Typography className={classes.label}>{t('import-data')}</Typography>
          <ImportDataPopup
            title={t('import-data')}
            content={t('import-data-content')}
            trigger={
              <Button className={classes.button} variant="contained" size="small">
                {t('import')}
              </Button>
            }
            onConfirm={importDataGenshinMap}
          />
        </Box>
        <Box className={classes.optionContainer}>
          <Typography className={classes.label}>{t('export-data')}</Typography>
          <ExportDataPopup
            title={t('export-data')}
            message={t('export-data-content')}
            fetchData={exportDataJSON}
            trigger={
              <Button className={classes.button} variant="contained" size="small">
                {t('export')}
              </Button>
            }
          />
        </Box>
      </BorderBox>
    </TabView>
  );
};

const mapStateToProps = (state) => ({
  displayed: state.controlsTab === 'sync',
});
const mapDispatchToProps = (dispatch) => ({
  completeFeatures: (features) => dispatch(setFeatureMarkersCompleted(features)),

  importPreferences: (data) => {
    try {
      const importedData = parseDataFromString(data);
      dispatch(setMapPreferences(importedData));
      return true;
    } catch (err) {
      switch (err.name) {
        case 'InvalidCharacterError':
          if (isValidJSON(data)) {
            dispatch(displayImportError(t('message-import-error-malformed-json')));
          } else {
            dispatch(displayImportError(t('message-import-error-malformed-not-json')));
          }
          break;
        default:
          console.error(err);
          console.error(err.name);
          dispatch(displayImportError(t('message-import-error-generic')));
      }
      return false;
    }
  },

  clearState: () => dispatch(clearMapPreferences()),
});
const MapControlsSync = connect(mapStateToProps, mapDispatchToProps)(_MapControlsSync);

export default MapControlsSync;
