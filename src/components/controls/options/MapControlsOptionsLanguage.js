import React from 'react';
import clsx from 'clsx';
import Flag from 'react-world-flags';
import Select from 'react-select-oss';
import { connect } from 'react-redux';
import { setOverrideLang } from '../../../redux/ducks/options';
import { getLanguageOptions } from '../../FeatureLocalization';
import { getShortLocale, t } from '../../Localization';
import { useImageExtension } from '../../Image';

import './MapControlsOptionsLanguage.css';

/**
 * Renders the current value of the Language.
 * @param {*} value The locale code.
 * @param {*} label The locale name.
 * @param {*} context 'menu' or 'value'
 * @param {*} inputValue
 * @param {*} selectValue
 */
const formatLanguageLabel = ({ value, label }, { _context, _inputValue, _selectValue }) => {
  let flagCode = value;
  // Flag overrides.
  switch (flagCode) {
    case 'en':
      // 'en' should display the United States flag.
      flagCode = 'us';
      break;
    case 'ko':
      // 'ko' should display the South Korean flag.
      flagCode = 'kr';
      break;
    case 'zh':
      // 'zh' should display the Chinese flag.
      flagCode = 'cn';
      break;
    default:
      // No override.
      break;
  }
  return (
    <div className={clsx('map-controls-options-language-label')}>
      <Flag
        code={flagCode}
        height={16}
        width={30}
        className={clsx('map-controls-options-language-flag')}
      />
      {label}
    </div>
  );
};

// Note: The dispatchers generated by mapDispatchToProps
// shadow their associated action generators.
/* eslint-disable no-shadow */
const _MapControlsOptionsLanguage = ({ options, setOverrideLang }) => {
  const ext = useImageExtension();

  const langOptions = getLanguageOptions();
  const currentLangCode =
    (options?.overrideLang ?? '') !== '' ? options.overrideLang : getShortLocale();
  const currentLang = langOptions.filter((langOption) => langOption.value === currentLangCode)[0];

  return (
    <div
      className={clsx('map-controls-options-container', `map-controls-options-container-${ext}`)}
    >
      <div className={clsx('map-controls-option')}>
        <span className={clsx('map-controls-option-label')}>{t('options-language')}</span>
        <Select
          isSearchable={false}
          className={clsx('popup-submit-editor-data-field-dropdown')}
          formatOptionLabel={formatLanguageLabel}
          options={langOptions}
          value={currentLang}
          onChange={(option) => setOverrideLang(option.value)}
        />
      </div>
    </div>
  );
};

const mapStateToProps = (state) => ({
  options: state.options,
});
const mapDispatchToProps = (dispatch) => ({
  setOverrideLang: (lang) => dispatch(setOverrideLang(lang)),
});
const MapControlsOptionsLanguage = connect(
  mapStateToProps,
  mapDispatchToProps
)(_MapControlsOptionsLanguage);

export default MapControlsOptionsLanguage;
